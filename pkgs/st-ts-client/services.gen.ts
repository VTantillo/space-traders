// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetStatusResponse, RegisterData, RegisterResponse, GetSystemsData, GetSystemsResponse, GetSystemData, GetSystemResponse, GetSystemWaypointsData, GetSystemWaypointsResponse, GetWaypointData, GetWaypointResponse, GetMarketData, GetMarketResponse, GetShipyardData, GetShipyardResponse, GetJumpGateData, GetJumpGateResponse, GetConstructionData, GetConstructionResponse, SupplyConstructionData, SupplyConstructionResponse, GetFactionsData, GetFactionsResponse, GetFactionData, GetFactionResponse, GetMyAgentResponse, GetAgentsData, GetAgentsResponse, GetAgentData, GetAgentResponse, GetContractsData, GetContractsResponse, GetContractData, GetContractResponse, AcceptContractData, AcceptContractResponse, DeliverContractData, DeliverContractResponse, FulfillContractData, FulfillContractResponse, GetMyShipsData, GetMyShipsResponse, PurchaseShipData, PurchaseShipResponse, GetMyShipData, GetMyShipResponse, GetMyShipCargoData, GetMyShipCargoResponse, OrbitShipData, OrbitShipResponse, ShipRefineData, ShipRefineResponse, CreateChartData, CreateChartResponse, GetShipCooldownData, GetShipCooldownResponse, DockShipData, DockShipResponse, CreateSurveyData, CreateSurveyResponse, ExtractResourcesData, ExtractResourcesResponse, SiphonResourcesData, SiphonResourcesResponse, ExtractResourcesWithSurveyData, ExtractResourcesWithSurveyResponse, JettisonData, JettisonResponse, JumpShipData, JumpShipResponse, NavigateShipData, NavigateShipResponse, PatchShipNavData, PatchShipNavResponse, GetShipNavData, GetShipNavResponse, WarpShipData, WarpShipResponse, SellCargoData, SellCargoResponse, CreateShipSystemScanData, CreateShipSystemScanResponse, CreateShipWaypointScanData, CreateShipWaypointScanResponse, CreateShipShipScanData, CreateShipShipScanResponse, RefuelShipData, RefuelShipResponse, PurchaseCargoData, PurchaseCargoResponse, TransferCargoData, TransferCargoResponse, NegotiateContractData, NegotiateContractResponse, GetMountsData, GetMountsResponse, InstallMountData, InstallMountResponse, RemoveMountData, RemoveMountResponse, GetScrapShipData, GetScrapShipResponse, ScrapShipData, ScrapShipResponse, GetRepairShipData, GetRepairShipResponse, RepairShipData, RepairShipResponse } from './types.gen';

/**
 * Get Status
 * Return the status of the game server.
 * This also includes a few global elements, such as announcements, server reset dates and leaderboards.
 * @returns unknown Fetched status successfully.
 * @throws ApiError
 */
export const getStatus = (): CancelablePromise<GetStatusResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/'
}); };

/**
 * Register New Agent
 * Creates a new agent and ties it to an account.
 * The agent symbol must consist of a 3-14 character string, and will be used to represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.
 *
 * This new agent will be tied to a starting faction of your choice, which determines your starting location, and will be granted an authorization token, a contract with their starting faction, a command ship that can fly across space with advanced capabilities, a small probe ship that can be used for reconnaissance, and 150,000 credits.
 *
 * > #### Keep your token safe and secure
 * >
 * > Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.
 *
 * If you are new to SpaceTraders, It is recommended to register with the COSMIC faction, a faction that is well connected to the rest of the universe. After registering, you should try our interactive [quickstart guide](https://docs.spacetraders.io/quickstart/new-game) which will walk you through basic API requests in just a few minutes.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Succesfully registered.
 * @throws ApiError
 */
export const register = (data: RegisterData = {}): CancelablePromise<RegisterResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/register',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * List Systems
 * Return a paginated list of all systems.
 * @param data The data for the request.
 * @param data.page What entry offset to request
 * @param data.limit How many entries to return per page
 * @returns unknown Successfully listed systems.
 * @throws ApiError
 */
export const getSystems = (data: GetSystemsData = {}): CancelablePromise<GetSystemsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/systems',
    query: {
        page: data.page,
        limit: data.limit
    }
}); };

/**
 * Get System
 * Get the details of a system.
 * @param data The data for the request.
 * @param data.systemSymbol The system symbol
 * @returns unknown Successfully fetched the system.
 * @throws ApiError
 */
export const getSystem = (data: GetSystemData): CancelablePromise<GetSystemResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/systems/{systemSymbol}',
    path: {
        systemSymbol: data.systemSymbol
    }
}); };

/**
 * List Waypoints in System
 * Return a paginated list of all of the waypoints for a given system.
 *
 * If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
 * @param data The data for the request.
 * @param data.systemSymbol The system symbol
 * @param data.page What entry offset to request
 * @param data.limit How many entries to return per page
 * @param data.type Filter waypoints by type.
 * @param data.traits Filter waypoints by one or more traits.
 * @returns unknown Successfully fetched all waypoints in the system.
 * @throws ApiError
 */
export const getSystemWaypoints = (data: GetSystemWaypointsData): CancelablePromise<GetSystemWaypointsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/systems/{systemSymbol}/waypoints',
    path: {
        systemSymbol: data.systemSymbol
    },
    query: {
        page: data.page,
        limit: data.limit,
        type: data.type,
        traits: data.traits
    }
}); };

/**
 * Get Waypoint
 * View the details of a waypoint.
 *
 * If the waypoint is uncharted, it will return the 'Uncharted' trait instead of its actual traits.
 * @param data The data for the request.
 * @param data.systemSymbol The system symbol
 * @param data.waypointSymbol The waypoint symbol
 * @returns unknown Successfully fetched waypoint.
 * @throws ApiError
 */
export const getWaypoint = (data: GetWaypointData): CancelablePromise<GetWaypointResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}',
    path: {
        systemSymbol: data.systemSymbol,
        waypointSymbol: data.waypointSymbol
    }
}); };

/**
 * Get Market
 * Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.
 *
 * Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
 * @param data The data for the request.
 * @param data.systemSymbol The system symbol
 * @param data.waypointSymbol The waypoint symbol
 * @returns unknown Successfully fetched the market.
 * @throws ApiError
 */
export const getMarket = (data: GetMarketData): CancelablePromise<GetMarketResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}/market',
    path: {
        systemSymbol: data.systemSymbol,
        waypointSymbol: data.waypointSymbol
    }
}); };

/**
 * Get Shipyard
 * Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
 * @param data The data for the request.
 * @param data.systemSymbol The system symbol
 * @param data.waypointSymbol The waypoint symbol
 * @returns unknown Successfully fetched the shipyard.
 * @throws ApiError
 */
export const getShipyard = (data: GetShipyardData): CancelablePromise<GetShipyardResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard',
    path: {
        systemSymbol: data.systemSymbol,
        waypointSymbol: data.waypointSymbol
    }
}); };

/**
 * Get Jump Gate
 * Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.
 *
 * Waypoints connected to this jump gate can be
 * @param data The data for the request.
 * @param data.systemSymbol The system symbol
 * @param data.waypointSymbol The waypoint symbol
 * @returns unknown Successfully fetched jump gate.
 * @throws ApiError
 */
export const getJumpGate = (data: GetJumpGateData): CancelablePromise<GetJumpGateResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate',
    path: {
        systemSymbol: data.systemSymbol,
        waypointSymbol: data.waypointSymbol
    }
}); };

/**
 * Get Construction Site
 * Get construction details for a waypoint. Requires a waypoint with a property of `isUnderConstruction` to be true.
 * @param data The data for the request.
 * @param data.systemSymbol The system symbol
 * @param data.waypointSymbol The waypoint symbol
 * @returns unknown Successfully fetched construction site.
 * @throws ApiError
 */
export const getConstruction = (data: GetConstructionData): CancelablePromise<GetConstructionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction',
    path: {
        systemSymbol: data.systemSymbol,
        waypointSymbol: data.waypointSymbol
    }
}); };

/**
 * Supply Construction Site
 * Supply a construction site with the specified good. Requires a waypoint with a property of `isUnderConstruction` to be true.
 *
 * The good must be in your ship's cargo. The good will be removed from your ship's cargo and added to the construction site's materials.
 * @param data The data for the request.
 * @param data.systemSymbol The system symbol
 * @param data.waypointSymbol The waypoint symbol
 * @param data.requestBody
 * @returns unknown Successfully supplied construction site.
 * @throws ApiError
 */
export const supplyConstruction = (data: SupplyConstructionData): CancelablePromise<SupplyConstructionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction/supply',
    path: {
        systemSymbol: data.systemSymbol,
        waypointSymbol: data.waypointSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * List Factions
 * Return a paginated list of all the factions in the game.
 * @param data The data for the request.
 * @param data.page What entry offset to request
 * @param data.limit How many entries to return per page
 * @returns unknown Succesfully fetched factions.
 * @throws ApiError
 */
export const getFactions = (data: GetFactionsData = {}): CancelablePromise<GetFactionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/factions',
    query: {
        page: data.page,
        limit: data.limit
    }
}); };

/**
 * Get Faction
 * View the details of a faction.
 * @param data The data for the request.
 * @param data.factionSymbol The faction symbol
 * @returns unknown Successfully fetched a faction.
 * @throws ApiError
 */
export const getFaction = (data: GetFactionData): CancelablePromise<GetFactionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/factions/{factionSymbol}',
    path: {
        factionSymbol: data.factionSymbol
    }
}); };

/**
 * Get Agent
 * Fetch your agent's details.
 * @returns unknown Successfully fetched agent details.
 * @throws ApiError
 */
export const getMyAgent = (): CancelablePromise<GetMyAgentResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/agent'
}); };

/**
 * List Agents
 * Fetch agents details.
 * @param data The data for the request.
 * @param data.page What entry offset to request
 * @param data.limit How many entries to return per page
 * @returns unknown Successfully fetched agents details.
 * @throws ApiError
 */
export const getAgents = (data: GetAgentsData = {}): CancelablePromise<GetAgentsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/agents',
    query: {
        page: data.page,
        limit: data.limit
    }
}); };

/**
 * Get Public Agent
 * Fetch agent details.
 * @param data The data for the request.
 * @param data.agentSymbol The agent symbol
 * @returns unknown Successfully fetched agent details.
 * @throws ApiError
 */
export const getAgent = (data: GetAgentData): CancelablePromise<GetAgentResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/agents/{agentSymbol}',
    path: {
        agentSymbol: data.agentSymbol
    }
}); };

/**
 * List Contracts
 * Return a paginated list of all your contracts.
 * @param data The data for the request.
 * @param data.page What entry offset to request
 * @param data.limit How many entries to return per page
 * @returns unknown Succesfully listed contracts.
 * @throws ApiError
 */
export const getContracts = (data: GetContractsData = {}): CancelablePromise<GetContractsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/contracts',
    query: {
        page: data.page,
        limit: data.limit
    }
}); };

/**
 * Get Contract
 * Get the details of a contract by ID.
 * @param data The data for the request.
 * @param data.contractId The contract ID
 * @returns unknown Successfully fetched contract.
 * @throws ApiError
 */
export const getContract = (data: GetContractData): CancelablePromise<GetContractResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/contracts/{contractId}',
    path: {
        contractId: data.contractId
    }
}); };

/**
 * Accept Contract
 * Accept a contract by ID.
 *
 * You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
 * @param data The data for the request.
 * @param data.contractId The contract ID to accept.
 * @returns unknown Succesfully accepted contract.
 * @throws ApiError
 */
export const acceptContract = (data: AcceptContractData): CancelablePromise<AcceptContractResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/contracts/{contractId}/accept',
    path: {
        contractId: data.contractId
    }
}); };

/**
 * Deliver Cargo to Contract
 * Deliver cargo to a contract.
 *
 * In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.
 *
 * Cargo that was delivered will be removed from the ship's cargo.
 * @param data The data for the request.
 * @param data.contractId The ID of the contract.
 * @param data.requestBody
 * @returns unknown Successfully delivered cargo to contract.
 * @throws ApiError
 */
export const deliverContract = (data: DeliverContractData): CancelablePromise<DeliverContractResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/contracts/{contractId}/deliver',
    path: {
        contractId: data.contractId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Fulfill Contract
 * Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
 * @param data The data for the request.
 * @param data.contractId The ID of the contract to fulfill.
 * @returns unknown Successfully fulfilled a contract.
 * @throws ApiError
 */
export const fulfillContract = (data: FulfillContractData): CancelablePromise<FulfillContractResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/contracts/{contractId}/fulfill',
    path: {
        contractId: data.contractId
    }
}); };

/**
 * List Ships
 * Return a paginated list of all of ships under your agent's ownership.
 * @param data The data for the request.
 * @param data.page What entry offset to request
 * @param data.limit How many entries to return per page
 * @returns unknown Succesfully listed ships.
 * @throws ApiError
 */
export const getMyShips = (data: GetMyShipsData = {}): CancelablePromise<GetMyShipsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/ships',
    query: {
        page: data.page,
        limit: data.limit
    }
}); };

/**
 * Purchase Ship
 * Purchase a ship from a Shipyard. In order to use this function, a ship under your agent's ownership must be in a waypoint that has the `Shipyard` trait, and the Shipyard must sell the type of the desired ship.
 *
 * Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Purchased ship successfully.
 * @throws ApiError
 */
export const purchaseShip = (data: PurchaseShipData = {}): CancelablePromise<PurchaseShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get Ship
 * Retrieve the details of a ship under your agent's ownership.
 * @param data The data for the request.
 * @param data.shipSymbol The symbol of the ship.
 * @returns unknown Successfully fetched ship.
 * @throws ApiError
 */
export const getMyShip = (data: GetMyShipData): CancelablePromise<GetMyShipResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/ships/{shipSymbol}',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Get Ship Cargo
 * Retrieve the cargo of a ship under your agent's ownership.
 * @param data The data for the request.
 * @param data.shipSymbol The symbol of the ship.
 * @returns unknown Successfully fetched ship's cargo.
 * @throws ApiError
 */
export const getMyShipCargo = (data: GetMyShipCargoData): CancelablePromise<GetMyShipCargoResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/ships/{shipSymbol}/cargo',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Orbit Ship
 * Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
 *
 * Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.
 *
 * The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
 * @param data The data for the request.
 * @param data.shipSymbol The symbol of the ship.
 * @returns unknown The ship has successfully moved into orbit at its current location.
 * @throws ApiError
 */
export const orbitShip = (data: OrbitShipData): CancelablePromise<OrbitShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/orbit',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Ship Refine
 * Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a `Refinery` module that can refine it.
 *
 * When refining, 30 basic goods will be converted into 10 processed goods.
 * @param data The data for the request.
 * @param data.shipSymbol The symbol of the ship.
 * @param data.requestBody
 * @returns unknown The ship has successfully refined goods.
 * @throws ApiError
 */
export const shipRefine = (data: ShipRefineData): CancelablePromise<ShipRefineResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/refine',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Create Chart
 * Command a ship to chart the waypoint at its current location.
 *
 * Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.
 *
 * Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint's traits.
 * @param data The data for the request.
 * @param data.shipSymbol The symbol of the ship.
 * @returns unknown Created
 * @throws ApiError
 */
export const createChart = (data: CreateChartData): CancelablePromise<CreateChartResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/chart',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Get Ship Cooldown
 * Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
 *
 * Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
 *
 * Response returns a 204 status code (no-content) when the ship has no cooldown.
 * @param data The data for the request.
 * @param data.shipSymbol The symbol of the ship.
 * @returns unknown Succesfully fetched ship's cooldown.
 * @returns void No cooldown.
 * @throws ApiError
 */
export const getShipCooldown = (data: GetShipCooldownData): CancelablePromise<GetShipCooldownResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/ships/{shipSymbol}/cooldown',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Dock Ship
 * Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.
 *
 * Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.
 *
 * The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
 * @param data The data for the request.
 * @param data.shipSymbol The symbol of the ship.
 * @returns unknown The ship has successfully docked at its current location.
 * @throws ApiError
 */
export const dockShip = (data: DockShipData): CancelablePromise<DockShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/dock',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Create Survey
 * Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.
 *
 * In order to use a survey, send the entire survey details in the body of the extract request.
 *
 * Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
 *
 * Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey's size. Multiple ships can use the same survey for extraction.
 *
 * A ship must have the `Surveyor` mount installed in order to use this function.
 * @param data The data for the request.
 * @param data.shipSymbol The symbol of the ship.
 * @returns unknown Surveys has been created.
 * @throws ApiError
 */
export const createSurvey = (data: CreateSurveyData): CancelablePromise<CreateSurveyResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/survey',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Extract Resources
 * Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.
 *
 * The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the `Gas Siphon` mount for gas-based goods or `Mining Laser` mount for ore-based goods.
 *
 * The survey property is now deprecated. See the `extract/survey` endpoint for more details.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @param data.requestBody
 * @returns unknown Extracted successfully.
 * @throws ApiError
 */
export const extractResources = (data: ExtractResourcesData): CancelablePromise<ExtractResourcesResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/extract',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Siphon Resources
 * Siphon gases, such as hydrocarbon, from gas giants.
 *
 * The ship must be in orbit to be able to siphon and must have siphon mounts and a gas processor installed.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown Siphon successful.
 * @throws ApiError
 */
export const siphonResources = (data: SiphonResourcesData): CancelablePromise<SiphonResourcesResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/siphon',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Extract Resources with Survey
 * Use a survey when extracting resources from a waypoint. This endpoint requires a survey as the payload, which allows your ship to extract specific yields.
 *
 * Send the full survey object as the payload which will be validated according to the signature. If the signature is invalid, or any properties of the survey are changed, the request will fail.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @param data.requestBody
 * @returns unknown Extracted successfully.
 * @throws ApiError
 */
export const extractResourcesWithSurvey = (data: ExtractResourcesWithSurveyData): CancelablePromise<ExtractResourcesWithSurveyResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/extract/survey',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Jettison Cargo
 * Jettison cargo from your ship's cargo hold.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @param data.requestBody
 * @returns unknown Jettison successful.
 * @throws ApiError
 */
export const jettison = (data: JettisonData): CancelablePromise<JettisonResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/jettison',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Jump Ship
 * Jump your ship instantly to a target connected waypoint. The ship must be in orbit to execute a jump.
 *
 * A unit of antimatter is purchased and consumed from the market when jumping. The price of antimatter is determined by the market and is subject to change. A ship can only jump to connected waypoints
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @param data.requestBody
 * @returns unknown Jump successful.
 * @throws ApiError
 */
export const jumpShip = (data: JumpShipData): CancelablePromise<JumpShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/jump',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Navigate Ship
 * Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship's current location. Navigating will consume the necessary fuel from the ship's manifest based on the distance to the target waypoint.
 *
 * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
 *
 * To travel between systems, see the ship's Warp or Jump actions.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @param data.requestBody
 * @returns unknown The successful transit information including the route details and changes to ship fuel. The route includes the expected time of arrival.
 * @throws ApiError
 */
export const navigateShip = (data: NavigateShipData): CancelablePromise<NavigateShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/navigate',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Patch Ship Nav
 * Update the nav configuration of a ship.
 *
 * Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @param data.requestBody
 * @returns unknown The updated nav data of the ship.
 * @throws ApiError
 */
export const patchShipNav = (data: PatchShipNavData): CancelablePromise<PatchShipNavResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/my/ships/{shipSymbol}/nav',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get Ship Nav
 * Get the current nav status of a ship.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown The current nav status of the ship.
 * @throws ApiError
 */
export const getShipNav = (data: GetShipNavData): CancelablePromise<GetShipNavResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/ships/{shipSymbol}/nav',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Warp Ship
 * Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the `Warp Drive` module installed. Warping will consume the necessary fuel from the ship's manifest.
 *
 * The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @param data.requestBody
 * @returns unknown The successful transit information including the route details and changes to ship fuel. The route includes the expected time of arrival.
 * @throws ApiError
 */
export const warpShip = (data: WarpShipData): CancelablePromise<WarpShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/warp',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Sell Cargo
 * Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the `Marketplace` trait in order to use this function.
 * @param data The data for the request.
 * @param data.shipSymbol Symbol of a ship.
 * @param data.requestBody
 * @returns unknown Cargo was successfully sold.
 * @throws ApiError
 */
export const sellCargo = (data: SellCargoData): CancelablePromise<SellCargoResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/sell',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Scan Systems
 * Scan for nearby systems, retrieving information on the systems' distance from the ship and their waypoints. Requires a ship to have the `Sensor Array` mount installed to use.
 *
 * The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown Successfully scanned for nearby systems.
 * @throws ApiError
 */
export const createShipSystemScan = (data: CreateShipSystemScanData): CancelablePromise<CreateShipSystemScanResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/scan/systems',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Scan Waypoints
 * Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints' traits.
 *
 * Requires a ship to have the `Sensor Array` mount installed to use.
 *
 * The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown Successfully scanned for nearby waypoints.
 * @throws ApiError
 */
export const createShipWaypointScan = (data: CreateShipWaypointScanData): CancelablePromise<CreateShipWaypointScanResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/scan/waypoints',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Scan Ships
 * Scan for nearby ships, retrieving information for all ships in range.
 *
 * Requires a ship to have the `Sensor Array` mount installed to use.
 *
 * The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown Successfully scanned for nearby ships.
 * @throws ApiError
 */
export const createShipShipScan = (data: CreateShipShipScanData): CancelablePromise<CreateShipShipScanResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/scan/ships',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Refuel Ship
 * Refuel your ship by buying fuel from the local market.
 *
 * Requires the ship to be docked in a waypoint that has the `Marketplace` trait, and the market must be selling fuel in order to refuel.
 *
 * Each fuel bought from the market replenishes 100 units in your ship's fuel.
 *
 * Ships will always be refuel to their frame's maximum fuel capacity when using this action.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @param data.requestBody
 * @returns unknown Refueled successfully.
 * @throws ApiError
 */
export const refuelShip = (data: RefuelShipData): CancelablePromise<RefuelShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/refuel',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Purchase Cargo
 * Purchase cargo from a market.
 *
 * The ship must be docked in a waypoint that has `Marketplace` trait, and the market must be selling a good to be able to purchase it.
 *
 * The maximum amount of units of a good that can be purchased in each transaction are denoted by the `tradeVolume` value of the good, which can be viewed by using the Get Market action.
 *
 * Purchased goods are added to the ship's cargo hold.
 * @param data The data for the request.
 * @param data.shipSymbol The ship's symbol.
 * @param data.requestBody
 * @returns unknown Purchased goods successfully.
 * @throws ApiError
 */
export const purchaseCargo = (data: PurchaseCargoData): CancelablePromise<PurchaseCargoResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/purchase',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Transfer Cargo
 * Transfer cargo between ships.
 *
 * The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.
 *
 * The response body's cargo shows the cargo of the transferring ship after the transfer is complete.
 * @param data The data for the request.
 * @param data.shipSymbol The transferring ship's symbol.
 * @param data.requestBody
 * @returns unknown Transfer successful.
 * @throws ApiError
 */
export const transferCargo = (data: TransferCargoData): CancelablePromise<TransferCargoResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/transfer',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Negotiate Contract
 * Negotiate a new contract with the HQ.
 *
 * In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.
 *
 * Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.
 *
 * The ship must be present at any waypoint with a faction present to negotiate a contract with that faction.
 * @param data The data for the request.
 * @param data.shipSymbol The ship's symbol.
 * @returns unknown Successfully negotiated a new contract.
 * @throws ApiError
 */
export const negotiateContract = (data: NegotiateContractData): CancelablePromise<NegotiateContractResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/negotiate/contract',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Get Mounts
 * Get the mounts installed on a ship.
 * @param data The data for the request.
 * @param data.shipSymbol The ship's symbol.
 * @returns unknown Got installed mounts.
 * @throws ApiError
 */
export const getMounts = (data: GetMountsData): CancelablePromise<GetMountsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/ships/{shipSymbol}/mounts',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Install Mount
 * Install a mount on a ship.
 *
 * In order to install a mount, the ship must be docked and located in a waypoint that has a `Shipyard` trait. The ship also must have the mount to install in its cargo hold.
 *
 * An installation fee will be deduced by the Shipyard for installing the mount on the ship.
 * @param data The data for the request.
 * @param data.shipSymbol The ship's symbol.
 * @param data.requestBody
 * @returns unknown Successfully installed the mount.
 * @throws ApiError
 */
export const installMount = (data: InstallMountData): CancelablePromise<InstallMountResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/mounts/install',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Remove Mount
 * Remove a mount from a ship.
 *
 * The ship must be docked in a waypoint that has the `Shipyard` trait, and must have the desired mount that it wish to remove installed.
 *
 * A removal fee will be deduced from the agent by the Shipyard.
 * @param data The data for the request.
 * @param data.shipSymbol The ship's symbol.
 * @param data.requestBody
 * @returns unknown Successfully removed the mount.
 * @throws ApiError
 */
export const removeMount = (data: RemoveMountData): CancelablePromise<RemoveMountResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/mounts/remove',
    path: {
        shipSymbol: data.shipSymbol
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get Scrap Ship
 * Get the amount of value that will be returned when scrapping a ship.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown Successfully retrieved the amount of value that will be returned when scrapping a ship.
 * @throws ApiError
 */
export const getScrapShip = (data: GetScrapShipData): CancelablePromise<GetScrapShipResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/ships/{shipSymbol}/scrap',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Scrap Ship
 * Scrap a ship, removing it from the game and returning a portion of the ship's value to the agent. The ship must be docked in a waypoint that has the `Shipyard` trait in order to use this function. To preview the amount of value that will be returned, use the Get Ship action.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown Ship scrapped successfully.
 * @throws ApiError
 */
export const scrapShip = (data: ScrapShipData): CancelablePromise<ScrapShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/scrap',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Get Repair Ship
 * Get the cost of repairing a ship.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown Successfully retrieved the cost of repairing a ship.
 * @throws ApiError
 */
export const getRepairShip = (data: GetRepairShipData): CancelablePromise<GetRepairShipResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/my/ships/{shipSymbol}/repair',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };

/**
 * Repair Ship
 * Repair a ship, restoring the ship to maximum condition. The ship must be docked at a waypoint that has the `Shipyard` trait in order to use this function. To preview the cost of repairing the ship, use the Get action.
 * @param data The data for the request.
 * @param data.shipSymbol The ship symbol.
 * @returns unknown Ship repaired successfully.
 * @throws ApiError
 */
export const repairShip = (data: RepairShipData): CancelablePromise<RepairShipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/my/ships/{shipSymbol}/repair',
    path: {
        shipSymbol: data.shipSymbol
    }
}); };